local DontSelfKick = {
    -- Add user IDs to exclude from kicking
}

local toggleActive = false  -- Start with the script being inactive

-- Function to handle the key press
local function onKeyPress(input, gameProcessed)
    if not gameProcessed then
        local focusedTextBox = game:GetService("UserInputService"):GetFocusedTextBox()
        if not focusedTextBox and input.KeyCode == Enum.KeyCode.J then
            toggleActive = not toggleActive  -- Toggle the script's active state
            game.StarterGui:SetCore("SendNotification", {
                Title = "Notification",
                Text = "Script is now " .. (toggleActive and "active" or "inactive"),
                Icon = "",
                Duration = 1
            })
        end
    end
end

-- Bind the key press event
game:GetService("UserInputService").InputBegan:Connect(onKeyPress)

-- Function to check players
local function checkPlayers()
    if toggleActive then
        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            if player:IsA("Player") then
                local shouldKick = true
                for _, id in ipairs(DontSelfKick) do
                    if player.UserId == id then
                        shouldKick = false
                        break
                    end
                end
                if shouldKick then
                    player:Kick("You have been kicked from the game.")  -- Adjust the kick message
                end
            end
        end
    end
end

-- Use RunService to periodically check players
game:GetService("RunService").Heartbeat:Connect(checkPlayers)
